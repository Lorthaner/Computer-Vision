# -*- coding: utf-8 -*-
"""CIFAR-10-v3-Piotrek.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3POit__WwIu0lB29DWs6LWcamdtUgWs
"""

import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as opt
import matplotlib.pyplot as plt
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

trainset = torchvision.datasets.CIFAR10(root = './sample_data', train = True, download = True, transform = transforms.Compose([transforms.RandomCrop(32, padding=4),
                                                                                                                               transforms.RandomHorizontalFlip(),
                                                                                                                               transforms.ToTensor(),
                                                                                                                               transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2470, 0.2435, 0.2616))]))

testset = torchvision.datasets.CIFAR10(root = './sample_data', train = False, transform = transforms.Compose([transforms.ToTensor(),
                                                                                               transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2470, 0.2435, 0.2616))]))

train_loader = torch.utils.data.DataLoader(trainset, batch_size = 100, shuffle = True)
test_loader = torch.utils.data.DataLoader(testset, batch_size = 100, shuffle = True)

class Bottleneck(nn.Module):
    def __init__(self, last_planes, in_planes, out_planes, dense_depth, stride, first_layer):
        super(Bottleneck, self).__init__()
        self.out_planes = out_planes
        self.dense_depth = dense_depth

        self.conv1 = nn.Conv2d(last_planes, in_planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(in_planes)
        self.conv2 = nn.Conv2d(in_planes, in_planes, kernel_size=3, stride=stride, padding=1, groups=32, bias=False)
        self.bn2 = nn.BatchNorm2d(in_planes)
        self.conv3 = nn.Conv2d(in_planes, out_planes+dense_depth, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(out_planes+dense_depth)

        self.shortcut = nn.Sequential()
        if first_layer:
            self.shortcut = nn.Sequential(
                nn.Conv2d(last_planes, out_planes+dense_depth, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(out_planes+dense_depth)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = F.relu(self.bn2(self.conv2(out)))
        out = self.bn3(self.conv3(out))
        x = self.shortcut(x)
        d = self.out_planes
        out = torch.cat([x[:,:d,:,:]+out[:,:d,:,:], x[:,d:,:,:], out[:,d:,:,:]], 1)
        out = F.relu(out)
        return out

class DPN(nn.Module):
    def __init__(self, cfg):
        super(DPN, self).__init__()
        in_planes, out_planes = cfg['in_planes'], cfg['out_planes']
        num_blocks, dense_depth = cfg['num_blocks'], cfg['dense_depth']

        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.last_planes = 64
        self.layer1 = self._make_layer(in_planes[0], out_planes[0], num_blocks[0], dense_depth[0], stride=1)
        self.layer2 = self._make_layer(in_planes[1], out_planes[1], num_blocks[1], dense_depth[1], stride=2)
        self.layer3 = self._make_layer(in_planes[2], out_planes[2], num_blocks[2], dense_depth[2], stride=2)
        self.layer4 = self._make_layer(in_planes[3], out_planes[3], num_blocks[3], dense_depth[3], stride=2)
        self.linear = nn.Linear(out_planes[3]+(num_blocks[3]+1)*dense_depth[3], 10)

    def _make_layer(self, in_planes, out_planes, num_blocks, dense_depth, stride):
        strides = [stride] + [1]*(num_blocks-1)
        layers = []
        for i,stride in enumerate(strides):
            layers.append(Bottleneck(self.last_planes, in_planes, out_planes, dense_depth, stride, i==0))
            self.last_planes = out_planes + (i+2) * dense_depth
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = F.avg_pool2d(out, 4)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out

def DPN92():
    cfg = {
        'in_planes': (96,192,384,768),
        'out_planes': (256,512,1024,2048),
        'num_blocks': (3,4,20,3),
        'dense_depth': (16,32,24,128)
    }
    return DPN(cfg)

model = DPN92()

model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = opt.SGD(model.parameters(), lr=0.1,
                      momentum=0.9, weight_decay=5e-4)
scheduler = opt.lr_scheduler.CosineAnnealingLR(optimizer, T_max=200)
for epoch in range(50):
    correct_train = 0
    total_train = 0
    training_loss = 0
    correct_test = 0
    total_test = 0
    correct_top_5 = 0
    eval_loss = 0
    model.train()
    for i, data in enumerate(train_loader, 0):
          # Move inputs and labels to chosen device
          images_train, labels_train = data[0].to(device), data[1].to(device)
          # Clear gradients from previous phase
          optimizer.zero_grad()
          # Forward pass
          pred_train= model(images_train)
          # Calculating cost function
          train_loss = criterion(pred_train, labels_train)
          # Propagating loss through network
          train_loss.backward()
          # Performing weights update
          optimizer.step()
          # Extract index of highest scored prediciton
          _, predicted_train = torch.max(pred_train, 1)
          # Iterate through all dataset and add all batches every epoch
          total_train += labels_train.size(0)
          # Check if predicitons and labels are same. They are in batches, that's why we use sum function. Finally .item() is useful to extract number from tensor.
          correct_train += (predicted_train == labels_train).sum().item()
          # Calculating training loss for further evaluation
          training_loss += train_loss.item()


        # Calculating accuracy/loss for one epoch
    accuracy = 100 * correct_train / total_train
    tr_loss = training_loss / total_train
    scheduler.step()
    print("Train accuracy = {}% , Epoch = {}, lr = {}, Loss = {}".format(accuracy,epoch+1,optimizer.param_groups[0]['lr'], tr_loss))
    
    #################### EVALUATION PHASE ####################
    model.eval()
    with torch.no_grad():
        for data_test in test_loader:
          # Move inputs and labels to chosen device
          images_test, labels_test  = data_test[0].to(device), data_test[1].to(device)
          # Forward pass
          pred_test = model(images_test)
          # Calculating cost function
          test_loss = criterion(pred_test, labels_test)

          ########## Top 1 accuracy calculation ##########
              
          # Extract index of highest scored prediciton
          _,predicted_test = torch.max(pred_test.data,1)
          # Iterate through all dataset and add all batches every epoch
          total_test += labels_test.size(0)
          # Check if predicitons and labels are same. They are in batches, that's why we use sum function. Finally .item() is useful to extract number from tensor.
          correct_test += (predicted_test == labels_test).sum().item()
          # Calculating test loss for further evaluation
          eval_loss += test_loss.item()
          # Calculating test accuracy/loss for one epoch
          test_accuracy = 100 * correct_test / total_test
          ts_loss = eval_loss / total_test
              
              
              
          ########## Top 5 accuracy calculation ##########

          # Extract indexes of 5 highest scored predicitons
          _, pred_test_top_5 = pred_test.topk(5, dim = 1, largest = True, sorted = True)
          # Transpose array for expand function
          pred_test_top_5 = pred_test_top_5.t()
          # Check if predicitons and labels are same. Labels are predicted for example if 5 highest scores indexes are [0,2,5,6,1], 
          # we comparing this with true label e.g [1], so we have to expand it. Finally we are comparing if [0,2,5,6,1] == [1,1,1,1,1] -> [False,False,False,False,True]
          top_5 = pred_test_top_5.eq(labels_test.view(1, -1).expand_as(pred_test_top_5))
          # Sum list to get 0 or 1
          correct_top_5 += top_5[:5].reshape(-1).float().sum().item()
          # Calculating top 5 accuracy for one epoch
          top_5_acc = 100 * correct_top_5 / total_test
              

        print("Test_accuracy: top 1 = {}%".format(test_accuracy))
        print("Test_accuracy: top 5 = {:.3f}%".format(top_5_acc))

PATH = '/content/gdrive/My Drive/model.pth'
torch.save({
            'model_state_dict': model.state_dict(),
            'optimizer_state_dict': optimizer.state_dict()
            }, PATH)