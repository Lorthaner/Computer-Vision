# -*- coding: utf-8 -*-
"""Klasyczne_algorytmy_scikit_learn_piotrek.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Ie5twXkyS80erA4Jcfi0xPgkyYgUvPG
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.gaussian_process.kernels import RBF
from sklearn.tree import DecisionTreeClassifier
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.datasets import load_wine
import pandas as pd

"""#Eksperyment 1 : Standaryzacja wyłącznie zbioru treningowego"""

wine = load_wine(as_frame=True)

wine.data

x_train, x_test, y_train, y_test = train_test_split(wine.data, wine.target, test_size=0.3, random_state=11)

std_scale = StandardScaler().fit(x_train)
x_train_std = std_scale.transform(x_train)
x_test_std  = std_scale.transform(x_test)

classifiers = [
    SVC(kernel="linear", C=0.10),
    DecisionTreeClassifier(max_depth=4),
    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=3),
    MLPClassifier(alpha=1, max_iter=1000),
    AdaBoostClassifier(n_estimators=100, learning_rate=0.065),
    KNeighborsClassifier(n_neighbors=1,leaf_size=10,p=1,metric='manhattan'),
    GaussianProcessClassifier(2.0 * RBF(3.0))
]
names = ['SVM','Decision_tree','Random_forest','MLPClassifier','Adaboost','KNN','RBF']

class accuracy_list(dict): 
    def __init__(self): 
        self = dict() 

    def add(self, key, value): 
        self[key] = value 
accuracy_list = accuracy_list()

for name, clf in zip(names, classifiers):
        clf.fit(x_train_std, y_train)
        score = clf.score(x_test_std, y_test)
        accuracy_list.add(name,score)

accuracy_list